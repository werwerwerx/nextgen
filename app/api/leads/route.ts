import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import { createAdminClient } from "@/lib/supabase/admin";
import { LeadResponse, TLeadData, validateLead } from "./shared";
import { sendNewLeadEmailNotification } from "@/lib/email";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendTelegramNotification(chatId: string, message: string) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.warn('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Telegram API error:', errorData);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function notifyObservers(leadData: any, courseName?: string) {
  const supabase = await createClient();
  
  try {
    const { data: observers } = await supabase
      .from('notifications_ovserver_contacts')
      .select('observer_telegram_id, obvserver_email');

    if (!observers || observers.length === 0) {
      console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π');
      return;
    }

    const telegramMessage = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>

üë§ <b>–ò–º—è:</b> ${leadData.name}
üìß <b>Email:</b> ${leadData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${leadData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìö <b>–ö—É—Ä—Å:</b> ${courseName || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è'}
üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `.trim();

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const notifications: Promise<any>[] = [];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const telegramObservers = observers.filter(obs => obs.observer_telegram_id);
    telegramObservers.forEach(observer => {
      notifications.push(
        sendTelegramNotification(observer.observer_telegram_id!, telegramMessage)
      );
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const emailObservers = observers.filter(obs => obs.obvserver_email);
    emailObservers.forEach(observer => {
      notifications.push(
        sendNewLeadEmailNotification(observer.obvserver_email!, leadData, courseName)
      );
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Promise.allSettled(notifications);

    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${observers.length} –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º (Telegram: ${telegramObservers.length}, Email: ${emailObservers.length})`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π:', error);
  }
}

export async function POST(
  request: NextRequest
): Promise<NextResponse<LeadResponse>> {
  const leadData = (await request.json()) as TLeadData;
  const supabase = createAdminClient();
  
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:', leadData);
  
  const errors = validateLead(leadData);
  if (errors) {
    console.log('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors);
    return NextResponse.json({
      success: false,
      errorMessage: JSON.stringify(errors),
      clientErrorMessage: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
    });
  }

  const [{ data: userByPhone }, { data: userByEmail }] = await Promise.all([
    supabase.from("leads").select("*").eq("phone", leadData.phone).single(),
    supabase.from("leads").select("*").eq("email", leadData.email).single(),
  ]);

  if (userByPhone || userByEmail) {
    console.log('–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞:', { userByPhone, userByEmail });
    return NextResponse.json({
      success: false,
      errorMessage: "Contact already exists",
      clientErrorMessage: "–ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
    });
  }

  const { data: leadSaved, error } = await supabase
    .from("leads")
    .insert({
      name: leadData.name,
      phone: leadData.phone,
      email: leadData.email,
      ip: request.headers.get("x-forwarded-for") || "unknown",
    })
    .select()
    .single();
    
  if (!leadSaved) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞:', error);
    return NextResponse.json({
      success: false,
      errorMessage: error?.message || 'Unknown error',
      clientErrorMessage: "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    });
  }

  console.log('–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', leadSaved);

  let courseName: string | undefined;

  if (leadData.courseInterestedInId) {
    console.log('–°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –∫—É—Ä—Å–æ–º:', leadData.courseInterestedInId);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
    const [{ data: course }, { error: userCourseError }] = await Promise.all([
      supabase
        .from('cources')
        .select('course_name')
        .eq('id', leadData.courseInterestedInId)
        .single(),
      supabase
        .from("user_course")
        .insert({
          course_id: leadData.courseInterestedInId,
          lead_id: leadSaved.id,
        })
    ]);

    if (course) {
      courseName = course.course_name;
      console.log('–ù–∞–π–¥–µ–Ω –∫—É—Ä—Å:', courseName);
    }

    if (userCourseError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—É—Ä—Å–æ–º:', userCourseError);
      // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ª–∏–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
      // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    } else {
      console.log('–°–≤—è–∑—å —Å –∫—É—Ä—Å–æ–º —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º (–≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
  notifyObservers(leadSaved, courseName).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  });

  console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç');
  return NextResponse.json({
    success: true,
    data: leadSaved,
  });
}
