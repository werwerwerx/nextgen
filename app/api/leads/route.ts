import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@/lib/supabase/server";
import { createAdminClient } from "@/lib/supabase/admin";
import { LeadResponse, TLeadData, validateLead } from "./shared";
import { sendNewLeadEmailNotification } from "@/lib/email";
import { Database } from "@/lib/supabase/database.types";
import { PostgrestError } from "@supabase/supabase-js";

type SavedLead = Database["public"]["Tables"]["leads"]["Row"];

type Observer = Database["public"]["Tables"]["notifications_ovserver_contacts"]["Row"];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendTelegramNotification(chatId: string, message: string): Promise<void> {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  if (!token) {
    throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML',
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`Telegram API error: ${JSON.stringify(errorData)}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
async function notifyObservers(leadData: SavedLead, courseName?: string): Promise<void> {
  const supabase = await createClient();
  
  console.log('–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π...');
  const { data: observers, error: observersError } = await supabase
    .from('notifications_ovserver_contacts')
    .select('*');

  if (observersError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π:', observersError);
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: ${observersError.message}`);
  }

  console.log('–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏:', observers);

  if (!observers || observers.length === 0) {
    console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    return;
  }

  const telegramMessage = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>

üë§ <b>–ò–º—è:</b> ${leadData.name}
üìß <b>Email:</b> ${leadData.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${leadData.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìö <b>–ö—É—Ä—Å:</b> ${courseName || '–ù—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'}
üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
  `.trim();

  const notifications: Promise<void>[] = [];

  const telegramObservers = observers.filter(obs => obs.observer_telegram_id);
  console.log('Telegram –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏:', telegramObservers);
  
  telegramObservers.forEach(observer => {
    if (observer.observer_telegram_id) {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è:', observer.observer_telegram_id);
      notifications.push(
        sendTelegramNotification(observer.observer_telegram_id, telegramMessage)
          .catch(error => {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${observer.observer_telegram_id}:`, error);
          })
      );
    }
  });

  const emailObservers = observers.filter(obs => obs.obvserver_email);
  console.log('Email –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏:', emailObservers);
  
  emailObservers.forEach(observer => {
    if (observer.obvserver_email) {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email:', observer.obvserver_email);
      notifications.push(
        sendNewLeadEmailNotification(observer.obvserver_email, leadData, courseName)
          .then(() => {
            console.log('Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', observer.obvserver_email);
          })
          .catch(error => {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${observer.obvserver_email}:`, error);
          })
      );
    }
  });

  await Promise.allSettled(notifications);
  console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${observers.length} –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è–º (Telegram: ${telegramObservers.length}, Email: ${emailObservers.length})`);
}

export async function POST(
  request: NextRequest
): Promise<NextResponse<LeadResponse>> {
  try {
    const leadData = (await request.json()) as TLeadData;
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:', leadData);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ honeypot
    if (leadData.company && leadData.company.length > 0) {
      console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –±–æ—Ç (honeypot)');
      return new NextResponse(
        JSON.stringify({
          success: false,
          error: "SPAM_DETECTED",
          message: "Spam detected"
        }),
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
    
    const errors = validateLead(leadData);
    if (errors) {
      console.log('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors);
      return new NextResponse(
        JSON.stringify({
          success: false,
          error: "VALIDATION_ERROR",
          errors,
          message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        }),
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    const supabase = createAdminClient();
    const [phoneResult, emailResult] = await Promise.all([
      supabase.from("leads").select("*").eq("phone", leadData.phone).single(),
      supabase.from("leads").select("*").eq("email", leadData.email).single(),
    ]);

    if (phoneResult.error && phoneResult.error.code !== 'PGRST116') {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phoneResult.error);
      return new NextResponse(
        JSON.stringify({
          success: false,
          error: "DATABASE_ERROR",
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }),
        { 
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    if (emailResult.error && emailResult.error.code !== 'PGRST116') {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:', emailResult.error);
      return new NextResponse(
        JSON.stringify({
          success: false,
          error: "DATABASE_ERROR",
          message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }),
        { 
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    if (phoneResult.data || emailResult.data) {
      console.log('–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞:', { 
        byPhone: phoneResult.data, 
        byEmail: emailResult.data 
      });
      return new NextResponse(
        JSON.stringify({
          success: false,
          error: "DUPLICATE_CONTACT",
          message: "–¢–∞–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ."
        }),
        { 
          status: 409,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    const { data: leadSaved, error: saveError } = await supabase
      .from("leads")
      .insert({
        name: leadData.name,
        phone: leadData.phone,
        email: leadData.email,
        ip: request.headers.get("x-forwarded-for") || "unknown",
      })
      .select()
      .single();
    
    if (saveError || !leadSaved) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞:', saveError);
      return new NextResponse(
        JSON.stringify({
          success: false,
          error: "DATABASE_ERROR",
          message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }),
        { 
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', leadSaved);

    let courseName: string | undefined;
    if (leadData.courseInterestedInId) {
      console.log('–°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –∫—É—Ä—Å–æ–º:', leadData.courseInterestedInId);
      
      const [{ data: course, error: courseError }, { error: userCourseError }] = await Promise.all([
        supabase
          .from('cources')
          .select('course_name')
          .eq('id', leadData.courseInterestedInId)
          .single(),
        supabase
          .from("user_course")
          .insert({
            course_id: leadData.courseInterestedInId,
            lead_id: leadSaved.id,
          })
      ]);

      if (courseError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ:', courseError);
      } else if (course) {
        courseName = course.course_name;
        console.log('–ù–∞–π–¥–µ–Ω –∫—É—Ä—Å:', courseName);
      }

      if (userCourseError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—É—Ä—Å–æ–º:', userCourseError);
      } else {
        console.log('–°–≤—è–∑—å —Å –∫—É—Ä—Å–æ–º —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }
    }

    try {
      await notifyObservers(leadSaved, courseName);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }

    return new NextResponse(
      JSON.stringify({
        success: true,
        data: leadSaved,
        message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
      }),
      { 
        status: 201,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏:', error);
    return new NextResponse(
      JSON.stringify({
        success: false,
        error: "INTERNAL_ERROR",
        message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
}
